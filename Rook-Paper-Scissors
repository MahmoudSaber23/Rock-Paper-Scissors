#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;

enum enGameChoice { Rook = 1, Paper, Scissors };
enum enWinner { Player = 1, Computer, Draw };
struct stRoundInfo {
    short RoundNumber = 0;
    enGameChoice PlayerChoice;
    enGameChoice ComputerChoice;
    enWinner RoundWinner;
    string WinnerName = "";
};
struct stGameResults {
    short GameRounds = 0;
    short PlayerWonTimes = 0;
    short ComputerWonTimes = 0;
    short DrawTimes = 0;
    enWinner GameWinner;
    string WinnerName = "";
};
int RandomNumber(int From, int To) {
    return rand() % (To - From + 1) + From;
}
string ChoiceName(enGameChoice Choice) {
    string arrGameChoice[3] = { "Rook","Paper","Scissors" };
    return arrGameChoice[Choice - 1];
}
string WinnerName(enWinner Winner) {
    string arrWinner[3] = { "Player","Computer","Draw" };
    return arrWinner[Winner - 1];
}
enWinner WhoWonTheRound(stRoundInfo RoundInfo) {
    if (RoundInfo.PlayerChoice == RoundInfo.ComputerChoice)
        return enWinner::Draw;

    switch (RoundInfo.PlayerChoice)
    {
    case enGameChoice::Rook:
        if (RoundInfo.ComputerChoice == enGameChoice::Paper)
            return enWinner::Computer;
        break;
    case enGameChoice::Paper:
        if (RoundInfo.ComputerChoice == enGameChoice::Scissors)
            return enWinner::Computer;
        break;
    case enGameChoice::Scissors:
        if (RoundInfo.ComputerChoice == enGameChoice::Rook)
            return enWinner::Computer;
        break;
    }
    return enWinner::Player;
}
enWinner WhoWonTheGame(short PlayerWinTimes, short ComputerWinTimes) {
    if (PlayerWinTimes > ComputerWinTimes)
        return enWinner::Player;
    else if (ComputerWinTimes > PlayerWinTimes)
        return enWinner::Computer;
    else
        return enWinner::Draw;
}
string Tabs(short NumberOfTabs) {
    string t = "";
    for (int i = 1; i <= NumberOfTabs; i++)
        t += "\t";
    return t;
}
enGameChoice ReadPlayerChoice() {
    short Choice;
    do {
        cout << "Your Choice: [1]:Rook ,[2]:Paper ,[3]:Scissors? ";
        cin >> Choice;
    } while (Choice < 1 || Choice>3);
    return enGameChoice(Choice);
}
enGameChoice GetComputerChoice() {
    return enGameChoice(RandomNumber(1, 3));
}
short HowManyRounds() {
    short GameRounds = 1;
    do {
        cout << "Enter How Many Rounds (1 To 10): ";
        cin >> GameRounds;
    } while (GameRounds < 1 || GameRounds>10);
    return  GameRounds;
}
void SetWinnerScreenColor(enWinner Winner) {
    switch (Winner)
    {
    case enWinner::Player:
        system("color 2F");
        break;
    case enWinner::Computer:
        system("color 4F");
        cout << "\a";
        break;
    default:
        system("color 6F");
    }
}
void PrintRoundResults(stRoundInfo RoundInfo) {
    cout << "\n\n__________________ Round [ " << RoundInfo.RoundNumber << " ] ______________________\n\n";
    cout << "Player Choice: " << ChoiceName(RoundInfo.PlayerChoice) << endl;
    cout << "Computer Choice: " << ChoiceName(RoundInfo.ComputerChoice) << endl;
    cout << "Round Winner: " << RoundInfo.WinnerName << endl;
    cout << "________________________________________________\n\n";
    SetWinnerScreenColor(RoundInfo.RoundWinner);
}
void PrintGameOverScreen() {
    cout << Tabs(1) << "_____________________________________________________________________\n";
    cout << Tabs(1) << "                        +++ G a m e  O v e r +++\n";
    cout << Tabs(1) << "_____________________________________________________________________\n\n";
}
void PrintFinalGameResults(stGameResults GameResults) {
    cout << Tabs(1) << "Game Rounds: " << GameResults.GameRounds << endl;
    cout << Tabs(1) << "Player Won Times: " << GameResults.PlayerWonTimes << endl;
    cout << Tabs(1) << "Computer Won Times: " << GameResults.ComputerWonTimes << endl;
    cout << Tabs(1) << "Draw Times: " << GameResults.DrawTimes << endl;
    cout << Tabs(1) << "Final Winner: " << GameResults.WinnerName << endl;
    SetWinnerScreenColor(GameResults.GameWinner);
}
stGameResults FillGameResult(short GameRounds, short PlayerWinTimes, short ComputerWinTimes, short DrawTimes) {
    stGameResults GameResult;
    GameResult.GameRounds = GameRounds;
    GameResult.PlayerWonTimes = PlayerWinTimes;
    GameResult.ComputerWonTimes = ComputerWinTimes;
    GameResult.DrawTimes = DrawTimes;
    GameResult.GameWinner = WhoWonTheGame(PlayerWinTimes, ComputerWinTimes);
    GameResult.WinnerName = WinnerName(GameResult.GameWinner);
    return GameResult;
}
stGameResults PlayGame(short HowManyRounds) {
    stRoundInfo RoundInfo;
    short PlayerWinTimes = 0, ComputerWinTimes = 0, DrawTimes = 0;

    for (short GameRound = 1; GameRound <= HowManyRounds; GameRound++) {
        cout << "\nRound[" << GameRound << "] Begins:\n";
        RoundInfo.RoundNumber = GameRound;
        RoundInfo.PlayerChoice = ReadPlayerChoice();
        RoundInfo.ComputerChoice = GetComputerChoice();
        RoundInfo.RoundWinner = WhoWonTheRound(RoundInfo);
        RoundInfo.WinnerName = WinnerName(RoundInfo.RoundWinner);

        if (RoundInfo.RoundWinner == enWinner::Player)
            PlayerWinTimes++;
        else if (RoundInfo.RoundWinner == enWinner::Computer)
            ComputerWinTimes++;
        else
            DrawTimes++;

        PrintRoundResults(RoundInfo);
    }
    return FillGameResult(HowManyRounds, PlayerWinTimes, ComputerWinTimes, DrawTimes);
}
void RestScreen() {
    system("cls");
    system("color 0F");
}
void StartGame() {
    char PlayAgain = 'Y';
    do {
        RestScreen();
        stGameResults GameResults = PlayGame(HowManyRounds());
        PrintGameOverScreen();
        PrintFinalGameResults(GameResults);

        cout << Tabs(1) << "Do You Want To Play Again? Y/N? ";
        cin >> PlayAgain;

    } while (PlayAgain == 'y' || PlayAgain == 'Y');
}
int main() {
    srand((unsigned)time(NULL));

    StartGame();
    return 0;
}
