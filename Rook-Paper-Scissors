#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

enum enGameChoice { Rook = 1, Paper, Scissors };
enum enWinner { Player = 1, Computer, Draw };

struct stRoundsInfo
{
    short RoundsNumber = 0;
    enGameChoice PlayerChoice;
    enGameChoice ComputerChoice;
    enWinner RoundWinner;
    string WinnerName = "";
};

struct stGameResults
{
    short GameRounds = 0;
    short PlayerWonTimes = 0;
    short ComputerWonTimes = 0;
    short DrawTimes = 0;
    enWinner GameWinner;
    string WinnerName = "";
};

int RandomNumber(int From, int To)
{
    int randNumber = rand() % (To - From + 1) + From;
    return randNumber;
}

string ChoiceName(enGameChoice Choice)
{
    string arrGameChoice[3] = { "Rook", "Paper", "Scissors" };
    return arrGameChoice[Choice - 1];
}

string WinnerName(enWinner Winner)
{
    string arrWinnerChoice[3] = { "Player", "Computer", "No Winner" };
    return arrWinnerChoice[Winner - 1];
}

string Tabs(short NumberOfTabs)
{
    string t = "";
    for (int i = 1; i <= NumberOfTabs; i++)
        t += "\t";
    return t;
}

void SetWinnerScreenColor(enWinner Winner)
{
    switch (Winner)
    {
    case enWinner::Player:
        system("color 2F");
        break;
    case enWinner::Computer:
        system("color 4F");
        cout << "\a";
        break;
    default:
        system("color 6F");
    }
}

void ResetScreen()
{
    system("cls");
    system("color 0F");
}

enWinner WhoWonTheRound(stRoundsInfo RoundInfo)
{
    if (RoundInfo.PlayerChoice == RoundInfo.ComputerChoice)
        return enWinner::Draw;

    switch (RoundInfo.PlayerChoice)
    {
    case enGameChoice::Rook:
        if (RoundInfo.ComputerChoice == enGameChoice::Paper)
            return enWinner::Computer;
        break;
    case enGameChoice::Paper:
        if (RoundInfo.ComputerChoice == enGameChoice::Scissors)
            return enWinner::Computer;
        break;
    case enGameChoice::Scissors:
        if (RoundInfo.ComputerChoice == enGameChoice::Rook)
            return enWinner::Computer;
        break;
    }

    return enWinner::Player;
}

enWinner WhoWonTheGame(short PlayerWonTimes, short ComputerWonTimes)
{
    if (PlayerWonTimes > ComputerWonTimes)
        return enWinner::Player;
    else if (ComputerWonTimes > PlayerWonTimes)
        return enWinner::Computer;
    else
        return enWinner::Draw;
}

stGameResults FillGameResult(short GameRounds, short PlayerWonTimes, short ComputerWonTimes, short DrawTimes)
{
    stGameResults GameResults;
    GameResults.GameRounds = GameRounds;
    GameResults.PlayerWonTimes = PlayerWonTimes;
    GameResults.ComputerWonTimes = ComputerWonTimes;
    GameResults.DrawTimes = DrawTimes;
    GameResults.GameWinner = WhoWonTheGame(PlayerWonTimes, ComputerWonTimes);
    GameResults.WinnerName = WinnerName(GameResults.GameWinner);
    return GameResults;
}

enGameChoice ReadPlayerChoice()
{
    short Choice;
    do
    {
        cout << "Your Choice: [1]:Rook ,[2]:Paper ,[3]:Scissors ? ";
        cin >> Choice;
    } while (Choice < 1 || Choice > 3);

    return enGameChoice(Choice);
}

enGameChoice GetComputerChoice()
{
    return enGameChoice(RandomNumber(1, 3));
}

short HowManyRounds()
{
    short RoundsNumber = 1;
    do
    {
        cout << "How Many Rounds (1 TO 10)? ";
        cin >> RoundsNumber;
    } while (RoundsNumber < 1 || RoundsNumber > 10);

    return RoundsNumber;
}

void PrintRoundResults(stRoundsInfo RoundInfo)
{
    cout << "________________________ Round [" << RoundInfo.RoundsNumber << "] ________________________\n";
    cout << "Player Choice   : " << ChoiceName(RoundInfo.PlayerChoice) << endl;
    cout << "Computer Choice : " << ChoiceName(RoundInfo.ComputerChoice) << endl;
    cout << "Round Winner    : " << WinnerName(RoundInfo.RoundWinner) << endl;
    cout << "_______________________________________________________________\n\n";
    SetWinnerScreenColor(RoundInfo.RoundWinner);
}

void PrintGameOverScreen()
{
    cout << "\n______________________________________________________________\n\n";
    cout << Tabs(2) << "+++ Game Over +++" << endl;
    cout << "\n______________________________________________________________\n\n";
}

void PrintGameFinalResults(stGameResults GameResults)
{
    cout << Tabs(1) << "__________________[ Game Results ]______________________\n";
    cout << Tabs(1) << "Game Rounds        : " << GameResults.GameRounds << endl;
    cout << Tabs(1) << "Player Won Times   : " << GameResults.PlayerWonTimes << endl;
    cout << Tabs(1) << "Computer Won Times : " << GameResults.ComputerWonTimes << endl;
    cout << Tabs(1) << "Draw Times         : " << GameResults.DrawTimes << endl;
    cout << Tabs(1) << "Final Winner       : " << GameResults.WinnerName << endl;
    cout << Tabs(1) << "_______________________________________________________\n";
    SetWinnerScreenColor(GameResults.GameWinner);
}

stGameResults PlayGame(short HowManyRound)
{
    stRoundsInfo RoundInfo;
    short PlayerWonTimes = 0, ComputerWonTimes = 0, DrawTimes = 0;

    for (short Round = 1; Round <= HowManyRound; Round++)
    {
        cout << "\nRound [" << Round << "] Begins\n";
        RoundInfo.RoundsNumber = Round;
        RoundInfo.PlayerChoice = ReadPlayerChoice();
        RoundInfo.ComputerChoice = GetComputerChoice();
        RoundInfo.RoundWinner = WhoWonTheRound(RoundInfo);
        RoundInfo.WinnerName = WinnerName(RoundInfo.RoundWinner);

        if (RoundInfo.RoundWinner == enWinner::Player)
            PlayerWonTimes++;
        else if (RoundInfo.RoundWinner == enWinner::Computer)
            ComputerWonTimes++;
        else
            DrawTimes++;

        PrintRoundResults(RoundInfo);
    }

    return FillGameResult(HowManyRound, PlayerWonTimes, ComputerWonTimes, DrawTimes);
}

void StartGame()
{
    char PlayAgain = 'Y';
    do
    {
        ResetScreen();
        short Rounds = HowManyRounds();
        stGameResults GameResults = PlayGame(Rounds);
        PrintGameOverScreen();
        PrintGameFinalResults(GameResults);
        cout << Tabs(1) << "Do You Want To Play Again? (Y/N): ";
        cin >> PlayAgain;
    } while (PlayAgain == 'Y' || PlayAgain == 'y');
}

int main()
{
    srand((unsigned)time(NULL));
    StartGame();
    system("pause>0");
    return 0;
}
